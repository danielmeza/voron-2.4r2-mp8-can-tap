# Possible Party LED macros:
# Party_2
# _Party_Leveling
# _Party_Homing
# _Party_Heating
# _Party_Cleaning
# _Party_Calibrating
# _Party_Printing
# _Party_Idle
# Party_Off
# Party_On

## SB LED Options
#    status_ready
#    Status_Off
#    status_busy
#    status_heating
#    status_leveling
#    status_homing
#    status_cleaning
#    status_meshing
#    status_calibrating_z
#    status_printing

###################################
# 	Macros
###################################

# Text name to point to G32 for a Home and QGL
[gcode_macro Home_Level]
gcode:
    G32

# Full Home
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    _CASELIGHT_ON
    status_leveling # SB LED color    
    _Party_Homing
    G28
    _Party_Leveling
    QUAD_GANTRY_LEVEL
    _Party_Homing
    G28
    G0 X175 Y175 Z30 F3600
    Party_Off

# Conditional Home
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        _Party_Homing
        status_homing
        G28
    {% endif %}

# https://docs.vorondesign.com/community/howto/alchemyEngine/Chamber_temperature_exhaust_fan.html
# See printer.cfg for companion fan control for Chamber

###################################
#
# 	Print Start / End
#
#   https://github.com/jontek2/A-better-print_start-macro
#
###################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
    # This part fetches data from your slicer. Such as bed temp, extruder temp, Chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|default("260")|int %}
    {% set target_Chamber = params.CHAMBER|default("40")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
    # CANCEL_HEAT_SOAK
    M141 S{target_Chamber}       # Sets exhaust fan and Chamber targets
    _CASELIGHT_ON                # Turn on the caselights
    status_homing               # Sets SB-leds to homing-mode
    _CG28                        # Conditoinal G28 - Full home (XYZ) if not already homed
    _Party_Homing                # Party Lights
    G90                          # Absolute position

    ##  Uncomment for bed mesh (1 of 2)
    BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

    ##  Quad gantry level early so if there is an issue
    SET_DISPLAY_TEXT MSG="Quad Gantry Leveling"      # Displays info
    status_leveling                                 # Sets SB-leds to leveling-mode
    _Party_Leveling                                  # Party Lights
    QUAD_GANTRY_LEVEL                                # Levels the buildplate via QGL
    _Party_Homing                                    # Party Lights
    G28 Z                                            # Homes Z again after QGL

##  Uncomment if you have a Nevermore.
        #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
        G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
        M106 S255                                           # Turns on the Part cooling fan
        status_heating                                     # Sets SB-leds to heating-mode
        _Party_Heating                                      # Party Lights
        M190 S{target_bed}                                  # Sets the target temp for the bed
        SET_DISPLAY_TEXT MSG="Heatsoak: {target_Chamber}c"  # Displays info
        TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={target_Chamber}   # Waits for Chamber to reach desired temp

    # If the bed temp is over 65c, then it skips the heatsoak and heats up to set BED temp with a 10 min soak
    {% elif params.BED|int > 65 %}
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
        status_heating                                     # Sets SB-leds to heating-mode
        _Party_Heating                                      # Party Lights
        G1 X{x_wait} Y{y_wait} Z15 F4000                    # Goes to center of the bed
        M190 S{target_bed}                                  # Sets the target temp for the bed
        SET_DISPLAY_TEXT MSG="Soak for 10 min"              # Displays info
        Party_2                                             # Party Lights
        G4 P600000                                          # Waits 10 min (in miliseconds) for the bedtemp to stabilize

    # Otherwise it skips the heatsoak and just heats up to set temp with a 5 min soak
    {% else %}
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
        status_heating                                     # Sets SB-leds to heating-mode
        _Party_Heating                                      # Party Lights
        G1 X{x_wait} Y{y_wait} Z15 F4000                    # Goes to center of the bed
        M190 S{target_bed}                                  # Sets the target temp for the bed
        SET_DISPLAY_TEXT MSG="Soak for 5 min"              # Displays info
        Party_2                                             # Party Lights
        G4 P300000                                          # Waits 5 min (in miliseconds) for the bedtemp to stabilize
    {% endif %}

    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    _Party_HeatingEx                             # Party Lights
    SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
    M109 S150                                    # Heats the nozzle to 150c

    ##  Quad gantry level
    SET_DISPLAY_TEXT MSG="Quad Gantry Leveling"      # Displays info
    status_leveling                                 # Sets SB-leds to leveling-mode
    _Party_Leveling                                  # Party Lights
    QUAD_GANTRY_LEVEL                                # Levels the buildplate via QGL
    _Party_Homing                                    # Party Lights
    G28 Z                                            # Homes Z again after QGL

    ##  Uncomment for bed mesh (2 of 2)
    # SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
    # status_meshing                     # Sets SB-leds to bed mesh-mode
    # bed_mesh_calibrate                 # Starts bed mesh

    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
    G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
    M107                                                          # Turns off partcooling fan
    status_heating                                               # Sets SB-leds to heating-mode
    _Party_HeatingEx                                              # Party Lights
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp
    BED_MESH_PROFILE LOAD=default
  
    # Gets ready to print by doing a purge line and updating the SB-leds
    SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
    status_printing                                 # Sets SB-leds to printing-mode
    _Party_Printing                                  # Party Lights
    G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
    G0 Z0.4                                          # Raises Z to 0.4
    G91                                              # Incremental positioning 
    G1 X100 E20 F1000                                # Purge line
    G90       

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           # wait for buffer to clear
    G92 E0                         # zero the extruder
    G1 E-3.0 F1500                 # retract filament
    G91                            # relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    # move nozzle to remove stringing
    TURN_OFF_HEATERS
    _Party_Idle                    # Party Lights
    M141 S40                       # pull Chamber temp down to 40*C
    M107                           # turn off part cooling fan
    _Party_Cleaning                # Party Lights
    CLEAN_NOZZLE                   # Call nozzle cleaning macro
    G1 Z100 F3000                  # move nozzle up 100mm
    G90                            # absolute positioning
    G0  X50 Y325 F3600            # park nozzle at left rear
    M84                            # Turn of motors
    RESTART_CROWSNEST              # Restart camera
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    Status_Off                     # Turn off the SB LEDs
    Party_2                        # Party Lights
    G4 P120000                     # Play Party for 2 minutes
    Party_Off                      # Party Lights
    _CASELIGHT_OFF                 # Turn off the caselights
    BED_MESH_CLEAR


###################################
#
# 	Pause / Resume / Cancel - Used with BTT Filament sensor
#
#   https://docs.vorondesign.com/community/howto/samwiseg0/btt_smart_filament_sensor.html
#
###################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

#Then:
# Put - SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1 - in your PRINT_START/resume macros.
# Put - SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0 - in your PRINT_END/pause/cancel macros.


###################################
#
# 	M600 (Filament Change) Alias
#
#   https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/040d31c6daaed23c2a1a353545e7ee442a232f32/articles/useful_macros.md
#
###################################

[gcode_macro M600]
description: This allows your pause to work natively with slicers that insert M600 for color changes. This just calls the pause macro (below).
gcode:
    #LCDRGB R=0 G=1 B=0  ; Turn LCD green
    PAUSE                ; Pause

###################################
# 	Pre-Heat for specific filament
###################################

[gcode_macro PREHEAT_ABS]
gcode:
    G90 #set absolute positioning
    _CASELIGHT_ON
    status_homing
    _CG28                    # Conditional G28 - home all axis if not already homed
    G0 X175 Y175 Z50 F3600   # Move hotend a sufficent distance from heated bed for heat soak
    M106 S250                # Set parts fan to full speed, helps circulate Chamber air
    M141 S45                 # Chamber temp to 45*C
    status_heating
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=105 #For ABS
    status_ready

###################################
#   Caselights
###################################

[gcode_macro _CASELIGHT_ON]
description: Helper: Light On
gcode:
    SET_PIN PIN=chamber_light VALUE=1.0
    {action_respond_info("Caselights On")}
    
[gcode_macro _CASELIGHT_OFF]
description: Helper: Light Off
gcode:
  SET_PIN PIN=chamber_light VALUE=0.0
  {action_respond_info("Caselights Off")}

[gcode_macro CASE_LIGHTS]
description: Toggle Light
gcode: 
    {% if printer['output_pin chamber_light'].value == 0 %} 
        _CASELIGHT_ON
    {% else %} 
        _CASELIGHT_OFF 
    {% endif %}

###################################
#   From: https://github.com/claudermilk/TridentBackup/blob/master/macros.cfg
#   show remaining time
###################################

[display_template _printing_time]
text:
  {% set ptime = printer["gcode_macro M73"].r %}
  { "%02d:%02d" % (ptime // 60, ptime % 60) }

###################################
#   Load / Unload from: https://github.com/jordanruthe/KlipperScreen/blob/master/docs/macros.md
###################################

[gcode_macro LOAD_FILAMENT]
gcode:
    _CASELIGHT_ON
    _CG28
    _Party_Homing          # Party Lights
    Park_Front
    _Party_Heating         # Party Lights
    status_heating
    M109 S250              # set temp to 230 and wait    
    status_busy    
    # {% set speed = params.SPEED|default(300) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    # SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E50 F350 # purge
    G1 E-1 F350
    M82
    # RESTORE_GCODE_STATE NAME=load_state
    Status_Off
    Party_Off

[gcode_macro UNLOAD_FILAMENT]
gcode:
    _CASELIGHT_ON
    _CG28
    _Party_Homing
    Park_Front
    _Party_Heating
    status_heating
    M109 S250             # set temp to 230 and wait
    status_busy
    _Party_2
    # {% set speed = params.SPEED|default(300) %}
    # {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    # SAVE_GCODE_STATE NAME=unload_state
    G91
    M83                   # Put the extruder into relative mode
    G92 E0
    G1 E10 F300 # purge
    G1 E-50 F500 # fast-unload
    G1 E-50 F500 # fast-unload
    M82
    # RESTORE_GCODE_STATE NAME=unload_state
    Status_Off
    Party_Off

###################################
# 	Park Front for nozzle change
###################################

# https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/parking.html
[gcode_macro PARK_FRONT]
gcode:
    status_homing
    _Party_Homing
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=Park_Front
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    Status_Off
    RESTORE_GCODE_STATE NAME=Park_Front
    Party_Off

#################################
#
# from: https://klipper.discourse.group/t/interruptible-heat-soak/1552
#
# Heat Soak Code
#
#################################

[gcode_macro CENTER]
description: move Toolhead to centered Position
gcode:
    _Party_Homing
    _CG28
    G0 X175 Y175 Z50 F3500
    Party_Off

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:

    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds
    
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    M141 S55 # Set chamber to 55*C

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    M106 S250 #set part cooling fan to full speed, helps circulate Chamber air

    # Insert bed fan code
    _Party_Heating
    status_heating
    _CASELIGHT_ON
    _CG28
    G0 X175 Y175 Z50 F3500    # move head to center of bed
    M84                       # turn off steppers
    _Party_Heating
    status_heating
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_DISPLAY_TEXT MSG="Heat Soak Canceled"           # Displays info
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
    _CASELIGHT_OFF
    Status_Off

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan
            M141 S35 # Set chamber to 35*C
            Status_Off
            

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}


[gcode_macro ABS_SOAK]
description: heats the bed for a while

# variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ 30 }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    M141 S55 # Set chamber to 55*C
    M140 S105 # Set bed temp to 105*C

    ;; fire up the heater
    # SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    M106 S250 #set part cooling fan to full speed, helps circulate Chamber air

    # Insert bed fan code
    _Party_Heating
    status_heating
    _CASELIGHT_ON
    _CG28
    G0 X175 Y175 Z50 F3500    # move head to center of bed
    M84                       # turn off steppers
    _Party_Heating
    status_heating
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

###################################
##
## 	Chamber Temp Control
##
##  https://github.com/zellneralex/klipper_config/blob/master/fan.cfg
##  https://github.com/claudermilk/TridentBackup/blob/master/fans.cfg
##
###################################

[gcode_macro M141]
description: Set temperature of Chamber fan
gcode: SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={params.S|default(0)}



