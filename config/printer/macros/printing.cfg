# https://docs.vorondesign.com/community/howto/alchemyEngine/Chamber_temperature_exhaust_fan.html
# See printer.cfg for companion fan control for Chamber

##############################################################
# 	Print Start / End                                        #
#   https://github.com/jontek2/A-better-print_start-macro    #
##############################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore - if you have one

[gcode_macro PRINT_START]
variable_clean_nozzle_enabled: 0
variable_quad_gantry_level_after_target_temp: 0
variable_filament_sensor_enabled: 0                 ## Enable the filament sensor
variable_use_bed_mesh: 1                            ## wether to use the bed mesh or not
variable_bed_mesh_config: 'default'                 ## default bed mesh config to use
variable_mesh_bed_before_print: 0                   ## enable this to perform a bed mesh before each print.
variable_heat_soack_enabled: 0                      ## Enable heat soack for chamber
variable_use_mevermore_filter: 0                    ## controls wether to use Nevermore filter
gcode:
    # This part fetches data from your slicer. Such as bed temp, extruder temp, Chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|default("260")|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

    # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
    # CANCEL_HEAT_SOAK
    M141 S{target_chamber}       # Sets exhaust fan and Chamber targets
    _CASELIGHT_ON                # Turn on the caselights
    status_homing                # Sets SB-leds to homing-mode
    _CG28                        # Conditoinal G28 - Full home (XYZ) if not already homed
    _Party_Homing                # Party Lights
    G90                          # Absolute position

    ##  Uncomment for bed mesh (1 of 2)
    BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={filament_sensor_enabled} 

    ##  Quad gantry level early so if there is an issue
    SET_DISPLAY_TEXT MSG="Quad Gantry Leveling"      # Displays info
    status_leveling                                 # Sets SB-leds to leveling-mode
    _Party_Leveling                                  # Party Lights
    _QUAD_GANTRY_LEVEL_IF_NEEDED                     # Levels the buildplate via QGL if not apply
    _Party_Homing                                    # Party Lights
    G28 Z                                            # Homes Z again after QGL

    ##  Nevermore filter
    {% if use_nevermore_filter == 1 %}
      SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore
    {% endif %}

    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
    {% if params.BED|int > 90 %}
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
        G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
        M106 S255                                           # Turns on the Part cooling fan
        status_heating                                      # Sets SB-leds to heating-mode
        _Party_Heating                                      # Party Lights
        M190 S{target_bed}                                  # Sets the target temp for the bed
        {% if heat_soack_enabled == 1 %}
          SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
          TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={target_chamber}   # Waits for Chamber to reach desired temp
        {% endif %}

    # If the bed temp is over 65c, then it skips the heatsoak and heats up to set BED temp with a 10 min soak
    {% elif params.BED|int > 65 %}
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
        status_heating                                      # Sets SB-leds to heating-mode
        _Party_Heating                                      # Party Lights
        G1 X{x_wait} Y{y_wait} Z15 F4000                    # Goes to center of the bed
        M190 S{target_bed}                                  # Sets the target temp for the bed
        SET_DISPLAY_TEXT MSG="Soak for 10 min"              # Displays info
        Party_2                                             # Party Lights
        G4 P600000                                          # Waits 10 min (in miliseconds) for the bedtemp to stabilize

    # Otherwise it skips the heatsoak and just heats up to set temp with a 5 min soak
    {% else %}
        SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
        status_heating                                      # Sets SB-leds to heating-mode
        _Party_Heating                                      # Party Lights
        G1 X{x_wait} Y{y_wait} Z15 F4000                    # Goes to center of the bed
        M190 S{target_bed}                                  # Sets the target temp for the bed
        SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Displays info
        Party_2                                             # Party Lights
        G4 P300000                                          # Waits 5 min (in miliseconds) for the bedtemp to stabilize
    {% endif %}

    #Go to purge bucket, heat to target temp, purge, cool to 150, wipe nozzle
	{% if clear_nozzle_enabled == 1 %}
		SET_DISPLAY_TEXT MSG="Cleaning Nozzle"
		clean_nozzle PURGE={target_extruder} CLEAN=150
	{% endif %}
	
	_CASELIGHT_OFF                                       # Turnon case lights to improve TAP acuarcy 

    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    {% if quad_gantry_level_after_target_temp == 1 or mesh_bed_before_print == 1 %}
        _Party_HeatingEx                                 # Party Lights
        SET_DISPLAY_TEXT MSG="Hotend: 150"               # Displays info
        M109 S150                                        # Heats the nozzle to 150c
    {% endif %}
    
    ##  Quad gantry level
	{% if quad_gantry_level_after_target_temp == 1 %}
        
		SET_DISPLAY_TEXT MSG="Quad Gantry Leveling"      # Displays info
		status_leveling                                  # Sets SB-leds to leveling-mode
		_Party_Leveling                                  # Party Lights
		QUAD_GANTRY_LEVEL                                # Levels the buildplate via QGL
		_Party_Homing                                    # Party Lights
		G28 Z                                            # Homes Z again after QGL
	{% endif %}
    
    ##  Mesh the bed before print
    {% if mesh_bed_before_print == 1 %}
      SET_DISPLAY_TEXT MSG="Meshing bed"    # Displays info
      status_meshing                        # Sets SB-leds to bed mesh-mode
      bed_mesh_calibrate                    # Starts bed mesh
    {% endif %}
    
	_CASELIGHT_ON

    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
    G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
    M107                                                          # Turns off partcooling fan
    status_heating                                                # Sets SB-leds to heating-mode
    _Party_HeatingEx                                              # Party Lights
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp
    
    #Configure bed_mesh if enabled and if no bedmesh has been performing before printing
    {% if use_bed_mesh == 1 and mesh_bed_before_print == 0 %}
        SET_DISPLAY_TEXT MSG="Loading bed mesh: {bed_mesh_config}"
        BED_MESH_PROFILE LOAD={bed_mesh_config}
    {% endif %}
    
    M106 S255                                       #turn on part fan

    # Gets ready to print by doing a purge line and updating the SB-leds
    SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
    status_printing                                  # Sets SB-leds to printing-mode
    _Party_Printing                                  # Party Lights
    G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
    G0 Z0.4                                          # Raises Z to 0.4
    G91                                              # Incremental positioning 
    G1 X100 E20 F1000                                # Purge line
    G90       

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           # wait for buffer to clear
    G92 E0                         # zero the extruder
    G1 E-3.0 F1500                 # retract filament
    G91                            # relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    # move nozzle to remove stringing
    TURN_OFF_HEATERS
    _Party_Idle                    # Party Lights
    M141 S40                       # pull Chamber temp down to 40*C
    M107                           # turn off part cooling fan
    _Party_Cleaning                # Party Lights
    # CLEAN_NOZZLE                   # Call nozzle cleaning macro
    G1 Z100 F3000                  # move nozzle up 100mm
    G90                            # absolute positioning
    G0  X50 Y325 F3600            # park nozzle at left rear
    M84                            # Turn of motors
    RESTART_CROWSNEST              # Restart camera
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    Status_Off                     # Turn off the SB LEDs
    Party_2                        # Party Lights
    G4 P120000                     # Play Party for 2 minutes
    Party_Off                      # Party Lights
    _CASELIGHT_OFF                 # Turn off the caselights
    BED_MESH_CLEAR


###################################
#
# 	Pause / Resume / Cancel - Used with BTT Filament sensor
#
#   https://docs.vorondesign.com/community/howto/samwiseg0/btt_smart_filament_sensor.html
#
###################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}
    {% set filament_sensor_enabled = printer['gcode_macro variables'].filament_sensor_enabled %} 
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE={filament_sensor_enabled}                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT
